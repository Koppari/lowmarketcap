{"version":3,"sources":["components/Crypto.js","components/CryptoList.js","components/CryptoRouter.js","components/Menu.js","services/cryptoService.js","reducers/cryptoReducer.js","App.js","store.js","index.js"],"names":["Crypto","_ref","crypto","react_default","a","createElement","className","onError","e","target","src","concat","symbol","alt","name","number_format_default","value","mcap","displayType","thousandSeparator","prefix","price_usd","change","volume","CryptoList","cryptos","map","c","key","id","Link","to","CryptoRouter","cryptoById","_this","props","find","_this2","this","HashRouter","Route","exact","path","render","components_CryptoList","match","components_Crypto","params","React","Component","ConnectedCryptoRouter","connect","state","Menu","href","placeholder","type","cryptoService","getAll","Object","asyncToGenerator","regenerator_default","mark","_callee","request","wrap","_context","prev","next","axios","get","sent","abrupt","data","stop","apply","arguments","_ref2","_callee2","_context2","_x","cryptoReducer","length","undefined","action","toConsumableArray","App","componentDidMount","cryptoInitialization","es","components_Menu","components_CryptoRouter","dispatch","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","react_redux_es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c67a92a0.chunk.js","sourcesContent":["import React from 'react'\r\nimport NumberFormat from 'react-number-format'\r\nconst imgUrl = 'https://raw.githubusercontent.com/crypti/cryptocurrencies/master/images/'\r\n\r\nconst Crypto = ({crypto}) => {\r\n    if (crypto == null) \r\n        return (\r\n            <div className=\"ui large active loader\"></div>\r\n        )\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"ui centered borderless header\">\r\n                <img\r\n                    onError={(e) => {\r\n                    e.target.src = 'https://screenshotlayer.com/images/assets/placeholder.png'\r\n                }}\r\n                    src={`${imgUrl + crypto.symbol}.png`}\r\n                    alt={crypto.symbol}\r\n                    className=\"ui image\"/>\r\n                <div className=\"content\">{crypto.name}\r\n                    <div className=\"sub header\">{crypto.symbol}</div>\r\n                </div>\r\n            </h2>\r\n\r\n            <div className=\"ui divider\"></div>\r\n\r\n            <div className=\"ui grid container\">\r\n                <div className=\"four wide column\">\r\n                    <div className=\"header\">Market cap:</div>\r\n                    <NumberFormat\r\n                        value={crypto.mcap === null\r\n                        ? 'Unknown'\r\n                        : crypto.mcap}\r\n                        displayType={'text'}\r\n                        thousandSeparator={true}\r\n                        prefix={'$'}/>\r\n                </div>\r\n                <div className=\"four wide column\">\r\n                    <div className=\"header\">Price:</div>\r\n                    <NumberFormat\r\n                        value={crypto.price_usd === null\r\n                        ? 'Unknown'\r\n                        : crypto.price_usd}\r\n                        displayType={'text'}\r\n                        thousandSeparator={true}\r\n                        prefix={'$'}/>\r\n                </div>\r\n                <div className=\"four wide column\">\r\n                    <div className=\"header\">Change (24h):</div>\r\n                    {crypto.change}%\r\n                </div>\r\n                <div className=\"four wide column\">\r\n                    <div className=\"header\">Volume (24h):</div>\r\n                    <NumberFormat\r\n                        value={crypto.volume === null\r\n                        ? 'Unknown'\r\n                        : crypto.volume}\r\n                        displayType={'text'}\r\n                        thousandSeparator={true}\r\n                        prefix={'$'}/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Crypto","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nconst CryptoList = ({cryptos}) => {\r\n    if (cryptos == null) \r\n    return (\r\n        <div className=\"ui large active loader\"></div>\r\n    )\r\n\r\n    return (\r\n        <table className=\"ui fixed sortable single line table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Market cap</th>\r\n                    <th>Price</th>\r\n                    <th>Change (24h)</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {cryptos.map(c => <tr key={c.id}>\r\n                    <td>\r\n                        <Link to={`/cryptos/${c.id}`}>{c.name}</Link>{' '}<small>{c.symbol}</small>\r\n                    </td>\r\n                    <td><NumberFormat value={c.mcap === null ? 'Unknown' : c.mcap} displayType={'text'} thousandSeparator={true} prefix={'$'}/></td>\r\n                    <td><NumberFormat value={c.price_usd === null ? 'Unknown' : c.price_usd} displayType={'text'} thousandSeparator={true} prefix={'$'}/></td>\r\n                    <td>{c.change}%</td>\r\n                </tr>)}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default CryptoList","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {HashRouter, Route} from 'react-router-dom'\r\n\r\nimport Crypto from './Crypto'\r\nimport CryptoList from './CryptoList'\r\n\r\nclass CryptoRouter extends React.Component {\r\n    cryptoById = (id) => {\r\n        return this\r\n            .props\r\n            .cryptos\r\n            .find(c => c.id === id)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <div>\r\n                    <Route\r\n                        exact\r\n                        path='/'\r\n                        render={() => <CryptoList cryptos={this.props.cryptos}/>}/>\r\n                    <Route\r\n                        exact\r\n                        path='/cryptos/:id'\r\n                        render={({match}) => <Crypto crypto={this.cryptoById(match.params.id)}/>}/>\r\n                </div>\r\n            </HashRouter>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const cryptos = state.cryptos\r\n    return {cryptos}\r\n}\r\n\r\nconst ConnectedCryptoRouter = connect(mapStateToProps)(CryptoRouter)\r\n\r\nexport default (ConnectedCryptoRouter)","import React from 'react'\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <div className=\"ui borderless menu\">\r\n            <div className=\"item\">\r\n                <h2>\r\n                    <a className=\"header\" href=\"/\">LowMarketCap</a>\r\n                </h2>\r\n            </div>\r\n            <div className=\"right menu\">\r\n                <div className=\"item\">\r\n                    <div className=\"ui icon input\">\r\n                        <input placeholder=\"Search\" type=\"text\"/>\r\n                        <i className=\"search icon\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu","import axios from 'axios'\r\n\r\nconst baseUrl = 'api/cryptos'\r\n\r\nconst getAll = async() => {\r\n  const request = await axios.get(baseUrl)\r\n  return request.data\r\n}\r\n\r\nconst get = async(id) => {\r\n  const request = await axios.get(`${baseUrl}/${id}`)\r\n  return request.data\r\n}\r\n\r\nexport default {\r\n  getAll,\r\n  get\r\n}","import cryptoService from '../services/cryptoService'\r\n\r\nconst cryptoReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'INIT_CRYPTOS':\r\n            return action.cryptos\r\n        default:\r\n            return [...state]\r\n    }\r\n}\r\n\r\nexport const cryptoInitialization = () => {\r\n    return async(dispatch) => {\r\n        const cryptos = await cryptoService.getAll()\r\n        dispatch({type: 'INIT_CRYPTOS', cryptos: cryptos})\r\n    }\r\n}\r\n\r\nexport default cryptoReducer","import React, {Component} from 'react'\nimport {Container} from 'semantic-ui-react'\nimport {HashRouter} from 'react-router-dom'\n\nimport CryptoRouter from './components/CryptoRouter'\nimport Menu from './components/Menu'\n\nimport {connect} from 'react-redux'\nimport {cryptoInitialization} from './reducers/cryptoReducer'\nimport cryptoService from './services/cryptoService'\n\nclass App extends Component {\n  componentDidMount = () => {\n    this\n      .props\n      .cryptoInitialization()\n  }\n\n  render() {\n    return (\n      <Container>\n        <HashRouter>\n          <div>\n            <Menu/>\n            <CryptoRouter/>\n          </div>\n        </HashRouter>\n      </Container>\n    );\n  }\n}\n\nexport default connect(null, {cryptoInitialization})(App)\n","import {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n\r\nimport cryptoReducer from './reducers/cryptoReducer'\r\n\r\nconst reducer = combineReducers({cryptos: cryptoReducer})\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport store from './store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n    <Provider store={store}>\n    <App/>\n</Provider>, document.getElementById('root'))"],"sourceRoot":""}